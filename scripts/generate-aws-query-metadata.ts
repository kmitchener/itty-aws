import { FileSystem } from "@effect/platform";
import { NodeFileSystem } from "@effect/platform-node";
import { Effect } from "effect";
import type { Manifest, Shape } from "./manifest.ts";
import { loadAllLocalManifests } from "./manifest.ts";

// Helper to extract shape name from shape ID
const extractShapeName = (shapeId: string): string => {
  const parts = shapeId.split("#");
  return parts[1] || "";
};

const program = Effect.gen(function* () {
  const fs = yield* FileSystem.FileSystem;
  const manifests = yield* loadAllLocalManifests();

  const queryServices: Record<string, any> = {};

  for (const { serviceName, manifest } of manifests) {
    const serviceShapeEntry = Object.entries(manifest.shapes).find(
      ([, shape]) => shape.type === "service",
    );
    if (!serviceShapeEntry) continue;

    const [, serviceShape] = serviceShapeEntry;
    const serviceTraits = serviceShape.traits || {};

    if (!serviceTraits["aws.protocols#awsQuery"]) {
      continue;
    }

    console.log(`Processing aws-query service: ${serviceName}`);

    const serviceMetadata: Record<string, any> = {
      shapes: {},
      operations: {},
      xmlNamespace: serviceTraits["smithy.api#xmlNamespace"]?.uri,
    };

    // Extract operations
    if (serviceShape.type === "service" && serviceShape.operations) {
      for (const opRef of serviceShape.operations) {
        const opName = extractShapeName(opRef.target);
        const opShape = manifest.shapes[opRef.target];
        if (opShape?.type === "operation") {
          serviceMetadata.operations[opName] = {
            output: opShape.output
              ? extractShapeName(opShape.output.target)
              : undefined,
          };
        }
      }
    }

    // Extract relevant shape information
    for (const [shapeId, shape] of Object.entries(manifest.shapes)) {
      const shapeName = extractShapeName(shapeId);
      const simplifiedShape: Record<string, any> = {
        type: shape.type,
      };

      if (shape.type === "structure" && shape.members) {
        simplifiedShape.members = {};
        for (const [memberName, member] of Object.entries(shape.members)) {
          const memberTraits = member.traits || {};
          simplifiedShape.members[memberName] = {
            shape: extractShapeName(member.target),
            xmlAttribute: !!memberTraits["smithy.api#xmlAttribute"],
            xmlFlattened: !!memberTraits["smithy.api#xmlFlattened"],
            xmlName: memberTraits["smithy.api#xmlName"]?.value,
          };
        }
      } else if (shape.type === "list" && shape.member) {
        const memberTraits = shape.member.traits || {};
        simplifiedShape.member = {
          shape: extractShapeName(shape.member.target),
          xmlName: memberTraits["smithy.api#xmlName"]?.value,
        };
      } else if (shape.type === "map" && shape.key && shape.value) {
        const keyTraits = shape.key.traits || {};
        const valueTraits = shape.value.traits || {};
        simplifiedShape.key = {
          shape: extractShapeName(shape.key.target),
          xmlName: keyTraits["smithy.api#xmlName"]?.value,
        };
        simplifiedShape.value = {
          shape: extractShapeName(shape.value.target),
          xmlName: valueTraits["smithy.api#xmlName"]?.value,
        };
      }

      serviceMetadata.shapes[shapeName] = simplifiedShape;
    }

    queryServices[serviceName] = serviceMetadata;
  }

  const outputCode = `// Auto-generated by scripts/generate-aws-query-metadata.ts
export const awsQueryMetadata = ${JSON.stringify(queryServices, null, 2)} as const;
`;

  yield* fs.writeFileString("src/protocols/aws-query-metadata.ts", outputCode);
  console.log("Successfully generated aws-query-metadata.ts");
});

const runnable = program.pipe(Effect.provide(NodeFileSystem.layer));

await Effect.runPromise(runnable);
